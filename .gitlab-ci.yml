variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  STAGING_ENABLED: "1"
  POSTGRES_ENABLED: "0"
  ROLLOUT_RESOURCE_TYPE: deployment
  INCREMENTAL_ROLLOUT_ENABLED: "0"

  DOCKER_IMAGE_VERSION: 19.03.1
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"

  #SERVICE_ACCOUNT_FILE: SERVICE_ACCOUNT_$CI_COMMIT_BRANCH     #TODO CI_COMMIT_BRANCH not available om Merge Request
  # Project Environment Settings NEEDS Update for new environment setup
  PROJECT_ID: "pri-auth-test"    #
  CLUSTER: "development" #TODO to be provisioned by DTP
  KUBE_NAMESPACE: "${CI_COMMIT_REF_SLUG}" #Namespace is defined by the branch name
  ZONE: "us-central1-c"
  REGION: "us-central1"
  NETWORK: "drls"

  GSA_NAME: "gsa-priauth-service" # Service Account Name to be created for crd application required for Cloud Storage Access for CDS-Library Access
  KSA_NAME: "k8s-priauth-service" # kubernetes service account for workload Identity for crd application

  # Pre-req: Project with Cluster + Agent + Ingress are setup.
  # To be changed depending on the deployment target environment
  # 'main' branch to be deployed into the 'demo' environment
  KUBE_AGENT: "development"

  KUBE_CONTEXT: $CI_PROJECT_NAMESPACE/gke-deploy-env:$KUBE_AGENT
  #KUBE_INGRESS_BASE_DOMAIN: 'papanca.com' #TODO

  CI_KUBERNETES_ACTIVE: 'true'
  CRD_IMAGE_TAG: "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/crd/gcpdev:latest"

  SERVICE_ACCOUNT_FILE: ${CI_PROJECT_DIR}/gcloud-service-key.json
  GITLAB_TOKEN_FILE: ${CI_PROJECT_DIR}/config.json

stages:
  - prepare_token
  - prepare_cluster
  - deploy
  - cleanup

# Needed to generate secret at cluster (one-time) to download images from GitLab repositories
# Alternative to consider is to add image pull secret to service account imagePullSecret TODO
# https://towardsdatascience.com/multiple-ways-to-create-kubernetes-secrets-33f97feaa499
prep token:
  environment: $CI_COMMIT_REF_SLUG
  stage: prepare_token
  image: docker:${DOCKER_IMAGE_VERSION}
  services:
  - docker:${DOCKER_IMAGE_VERSION}-dind
  script:
  # GitLab Token
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - cat $HOME/.docker/config.json > ${GITLAB_TOKEN_FILE}
  # GCP Service Account Token
  #- echo ${SERVICE_ACCOUNT} | base64 --decode -i > ${SERVICE_ACCOUNT_FILE} #TODO save encoded
  - echo ${SERVICE_ACCOUNT}
  - echo ${SERVICE_ACCOUNT} > ${SERVICE_ACCOUNT_FILE}
  - echo "SERVICE_ACCOUNT_FILE=$SERVICE_ACCOUNT_FILE"
  - cat ${SERVICE_ACCOUNT_FILE}
  artifacts:
    paths:
    - ${GITLAB_TOKEN_FILE}
    - ${SERVICE_ACCOUNT_FILE}
    expire_in: 1 day


# Depends on CLOUDSDK_CORE_PROJECT, CLOUDSDK_CONTAINER_CLUSTER, and CLOUDSDK_COMPUTE_ZONE SERVICE_ACCOUNT being set
.gcloud: &gcloud
#- echo $GCLOUD_SERVICE_KEY | base64 --decode -i > ~/gcloud-service-key.json
#- gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
#- gcloud --quiet container clusters get-credentials $CLOUDSDK_CONTAINER_CLUSTER
- cat ${SERVICE_ACCOUNT_FILE}
- gcloud auth activate-service-account --key-file ${SERVICE_ACCOUNT_FILE} --project=$PROJECT_ID
# Get into the Cluster NAMESPACE context using GitLab Agent
- kubectl config use-context $KUBE_CONTEXT
- kubectl get namespace "$KUBE_NAMESPACE" 2>/dev/null || kubectl create namespace "$KUBE_NAMESPACE"
- kubectl config set-context --current --namespace=$KUBE_NAMESPACE

# Using docker token from `prepare_token` step creates namespace, secret and deploys CDS-Library to Cloud Storage.
# The latest steps requires setting up Workload Identity in the given namespace
prepare cluster:
  image: google/cloud-sdk
  stage: prepare_cluster
  environment: $CI_COMMIT_REF_SLUG
  before_script: *gcloud
  script:
  # Create Secret if not existing to PullImages from GitLab
  - kubectl get secret regcred --namespace=$KUBE_NAMESPACE 2>/dev/null ||
    kubectl create secret generic regcred --from-file=.dockerconfigjson=${GITLAB_TOKEN_FILE}
    --type=kubernetes.io/dockerconfigjson --namespace=$KUBE_NAMESPACE

# Depends on GR_TOKEN - Gitlab Runner Token variables with access to API - defined inside Project Settings->CI/CD
deploy CDS-Library:
  image: google/cloud-sdk
  stage: deploy
  environment: $CI_COMMIT_REF_SLUG
  before_script: *gcloud
  script:
  - apt-get update && apt-get install git
  - apt-get install zip unzip -q
  # Deploys CDS-Library
  # Get CDS-Library from GitLab repo, zips and uploads into the GCP Cloud Storage Bucket
  - git clone https://oauth2:$GR_TOKEN@gitlab.com/$CI_PROJECT_NAMESPACE/CDS-Library.git ${CI_PROJECT_DIR}/../CDS-Library
  - KSA_NAME=$KSA_NAME GSA_NAME=$GSA_NAME CLUSTER=$CLUSTER PROJECT_ID=$PROJECT_ID KUBE_NAMESPACE=$KUBE_NAMESPACE
    bash ${CI_PROJECT_DIR}/deploy_CDS_Library.sh

deploy applications:
  environment: $CI_COMMIT_REF_SLUG
  stage: deploy
  image:
    name: google/cloud-sdk
  before_script: *gcloud
  script:
  - ${CI_PROJECT_DIR}/deploy_services.sh
  - |
    if [ -n "$APPLICATION" ]; then
      echo "deployment is triggered by the $APPLICATION, executing on ${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}, ${CI_BRANCH_TAG_NORMALIZED}"
      echo "Using the image $IMAGE_TAG built by the "$APPLICATION" pipeline"
      IMAGE_TAG=$IMAGE_TAG bash "${CI_PROJECT_DIR}/$APPLICATION/gcp/apply.sh"
      #patch instead
      #- kubectl patch deployment $PRODUCTION_SERVICE_NAME -p '{"spec":{"template":{"spec":{"containers":[{"name":"'"$PRODUCTION_SERVICE_NAME"'","image":"'"$CI_REGISTRY_IMAGE:$CI_BUILD_REF"'"}]}}}}'
    else
      echo "Internal Changes to manifest files, need to re-deploy all applications with images corresponding to this branch"
      echo "${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}, $ ${CF_BRANCH_TAG_NORMALIZED}:latest"
      CRD_IMAGE_TAG=$CRD_IMAGE_TAG VSAC_API_KEY=$VSAC_API_KEY KSA_NAME=$KSA_NAME bash "${CI_PROJECT_DIR}/crd/gcp/apply.sh"
      cat ${CI_PROJECT_DIR}/crd/k8s/deployment.yaml
    fi


gcloud destroy:
  stage: cleanup
  image: google/cloud-sdk
  when: manual
  script:
  - "${CI_PROJECT_DIR}/delete_deployments.sh"

#deploy_review:
#  stage: deploy
#  script:
#  - echo "Deploy a review app"
#  environment:
#    name: review/$CI_COMMIT_REF_SLUG
#    url: https://$CI_ENVIRONMENT_SLUG.example.com
#  rules:
#  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#    when: never
#  - if: $CI_COMMIT_BRANCH