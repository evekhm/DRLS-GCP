include:
  project: gcp-solutions/hcls/claims-modernization/gitlab-ci
  file: /.gitlab/ci/.deploy.gitlab-ci.yml

variables:
  GSA_NAME: "gsa-priauth-service" # Service Account Name to be created for crd application required for Cloud Storage Access for CDS-Library Access
  KSA_NAME: "k8s-priauth-service" # kubernetes service account for workload Identity for crd application
  GSA_EMAIL: $GSA_NAME@$PROJECT_ID.iam.gserviceaccount.com

  APPLICATION_NAMESPACE: ${CI_PROJECT_NAMESPACE}

  #Sharing same Agent, but could use different agents per environment
  #GITLAB_AGENT: ${CI_PROJECT_NAMESPACE}/gke-deploy-env:development
  KUBE_CONTEXT_DEMO: ${CI_PROJECT_NAMESPACE}/gke-deploy-env:gitlab-agent
  KUBE_CONTEXT_TEST: ${CI_PROJECT_NAMESPACE}/gke-deploy-env:gitlab-agent
  KUBE_CONTEXT_DEV: ${CI_PROJECT_NAMESPACE}/gke-deploy-env:gitlab-agent

  ######### Per Environment #############
  CLUSTER: "development"
  ZONE: "us-central1-c"
  REGION: "us-central1"
  PROJECT_ID_TEST: "pri-auth-cicd"
  PROJECT_ID_DEMO: "pri-auth-cicd"
  PROJECT_ID_DEV: "pri-auth-cicd"

  # System Variables Temp Files
  OUT_ENV: ${CI_PROJECT_DIR}/.env

stages:
- prepare
- build-keycloak
- deploy
- destroy

# Depends on SERVICE_ACCOUNT_FILE - JSON KEY File from ServiceAccount downloaded from GCP and saved as FILE Variable CI/CD Settings
.gcloud: &gcloud
#- echo $GCLOUD_SERVICE_KEY | base64 --decode -i > ~/gcloud-service-key.json
#- gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
#- gcloud --quiet container clusters get-credentials $CLOUDSDK_CONTAINER_CLUSTER
- gcloud auth activate-service-account --key-file ${SERVICE_ACCOUNT_FILE} --project=$PROJECT_ID
- kubectl config use-context $KUBE_CONTEXT
- kubectl get namespace "$NAMESPACE" 2>/dev/null || kubectl create namespace "$NAMESPACE"
- kubectl config set-context --current --namespace=$NAMESPACE
- kubectl config current-context
- gcloud --quiet container clusters get-credentials $CLUSTER --region $REGION

gcloud destroy:
  stage: destroy
  image: google/cloud-sdk
  when: manual
  script:
  - PROJECT_ID=$PROJECT_ID BUCKET=$BUCKET bash "${CI_PROJECT_DIR}/CRD/gcp/delete.sh"

# keycloak Fhir realm created by Da Vinci uses H2 and needs TEST-EHR IP
# We use a wirkaround and embed TEST-EHR into the image.
# Later this could be resolved by replacing keycloak or moving from h2 to postgress
build_keycloak:
  stage: build-keycloak
  image: docker:${DOCKER_IMAGE_VERSION}
  services:
  - docker:${DOCKER_IMAGE_VERSION}-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_IMAGE_VERSION: 19.03.1
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  #  BRANCH_NAME: "" #Workaround for Gitlab not coping with un-set variables in the rules
  before_script:
  - docker login -u ${CI_DEPLOY_USER} -p ${CI_DEPLOY_PASSWORD} ${CI_REGISTRY}
  script:
  - set -x
  - ls ${VARIABLES_FILE}
  - cat ${VARIABLES_FILE}
  - source ${VARIABLES_FILE}
  - echo $TEST_EHR
  - IMAGE="${CI_REGISTRY}/${APPLICATION_NAMESPACE}/auth/${IMAGE_TYPE}"
  - IMAGE_TAG="${IMAGE}":"${CI_JOB_ID}"
  - LATEST="${IMAGE}":"latest"
  - echo $IMAGE, $IMAGE_TAG
  - apk update
  - apk add git
  - APPLICATION=auth
  #- git clone https://"${CI_DEPLOY_USER}":"${CI_DEPLOY_PASSWORD}"@${CI_SERVER_HOST}/${APPLICATION_NAMESPACE}/$APPLICATION.git $APPLICATION
  - echo ${APPLICATION_NAMESPACE}
  - echo ${CI_SERVER_HOST}/${APPLICATION_NAMESPACE}/${APPLICATION}.git
  - git clone https://"${CI_DEPLOY_USER}":"${CI_DEPLOY_PASSWORD}"@${CI_SERVER_HOST}/gcp-solutions/hcls/claims-modernization/pa-ref-impl/${APPLICATION}.git $APPLICATION
  - cd $APPLICATION
  - sed  's|__TEST_EHR__|'"'$TEST_EHR'"'|g; ' config/ClientFhirServerRealm.sample.json > config/ClientFhirServerRealm.json
  - docker build -f Dockerfile -t "$IMAGE_TAG" -t "$LATEST" .
  - docker push "$IMAGE_TAG"
  - docker push "$LATEST"
  rules:
  - !reference [.build_vars, rules]
