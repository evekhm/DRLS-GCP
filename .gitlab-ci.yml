include:
  project: gcp-solutions/hcls/claims-modernization/gitlab-ci
  file: /.gitlab/ci/.deploy.gitlab-ci.yml

variables:
  GSA_NAME: "gsa-priauth-service" # Service Account Name to be created for crd application required for Cloud Storage Access for CDS-Library Access
  KSA_NAME: "k8s-priauth-service" # kubernetes service account for workload Identity for crd application

  APPLICATION_NAMESPACE: ${CI_PROJECT_NAMESPACE}

  #Sharing same Agent, but could use different agents per environment
  #GITLAB_AGENT: ${CI_PROJECT_NAMESPACE}/gke-deploy-env:development
  KUBE_CONTEXT_DEMO: ${CI_PROJECT_NAMESPACE}/gke-deploy-env:gitlab-agent
  KUBE_CONTEXT_TEST: ${CI_PROJECT_NAMESPACE}/gke-deploy-env:gitlab-agent
  KUBE_CONTEXT_DEV: ${CI_PROJECT_NAMESPACE}/gke-deploy-env:gitlab-agent

  ######### Per Environment #############
  PROJECT_ID_TEST: "pri-auth-cicd"
  PROJECT_ID_DEMO: "pri-auth-cicd"
  PROJECT_ID_DEV: "pri-auth-cicd"

stages:
- prepare
- build-keycloak
- deploy
- destroy

# Depends on SERVICE_ACCOUNT_FILE - JSON KEY File from ServiceAccount downloaded from GCP and saved as FILE Variable CI/CD Settings
.gcloud: &gcloud
#- echo $GCLOUD_SERVICE_KEY | base64 --decode -i > ~/gcloud-service-key.json
#- gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
#- gcloud --quiet container clusters get-credentials $CLOUDSDK_CONTAINER_CLUSTER
- gcloud auth activate-service-account --key-file ${SERVICE_ACCOUNT_FILE} --project=$PROJECT_ID
- kubectl config use-context $KUBE_CONTEXT
- kubectl get namespace "$KUBE_NAMESPACE" 2>/dev/null || kubectl create namespace "$KUBE_NAMESPACE"
- kubectl config set-context --current --namespace=$KUBE_NAMESPACE
- kubectl config current-context
- gcloud --quiet container clusters get-credentials $CLUSTER --region $REGION

destroy:
  stage: destroy
  image: google/cloud-sdk
  when: manual
  script:
  - kubectl delete –all pods –namespace=$KUBE_NAMESPACE

# keycloak Fhir realm created by Da Vinci uses H2 and needs TEST-EHR IP
# We use a workaround and embed TEST-EHR into the image.
# Later this could be resolved by replacing keycloak or moving from h2 to postgress
build_keycloak:
  stage: build-keycloak
  image: docker:${DOCKER_IMAGE_VERSION}
  services:
  - docker:${DOCKER_IMAGE_VERSION}-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_IMAGE_VERSION: 19.03.1
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  script:
  - set -x
  - apk update
  - apk add git
  - ${CI_PROJECT_DIR}/jobs/build_keycloak.sh
  rules:
  - if: $PIPELINE_TRIGGERED #exclude building keycloak when triggered from upstream
    when: never
  - !reference [.build_vars, rules]
