variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  STAGING_ENABLED: "1"
  POSTGRES_ENABLED: "0"
  ROLLOUT_RESOURCE_TYPE: deployment
  INCREMENTAL_ROLLOUT_ENABLED: "0"
  GSA_NAME: "gsa-priauth-service"
  KSA_NAME: " "

  # Pre-req: Project with Cluster + Agent + Ingress are setup.
  # To be changed depending on the deployment target environment
  # 'main' branch to be deployed into the 'demo' environment
  KUBE_CONTEXT: "gcp-solutions/hcls/claims-modernization/gitlab-gke:development"
  #KUBE_INGRESS_BASE_DOMAIN: 'papanca.com' #TODO

  CI_KUBERNETES_ACTIVE: 'true'
  KUBE_NAMESPACE: "${CI_COMMIT_REF_SLUG}"

  PROJECT_ID: "pri-auth-test"
  CRD_IMAGE_TAG: "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/crd/gcpdev:latest"

stages:
  #- prepare # TODO now doing this manually on cluster, since special service account is needed
  - deploy
  - cleanup


#prepare cluster:
#  environment: $CI_COMMIT_REF_SLUG
#  stage: prepare
#  image: google/cloud-sdk
#  script:
#  - ${CI_PROJECT_DIR}/setup_cluster.sh

deploy to gke:
  environment: $CI_COMMIT_REF_SLUG
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
  - kubectl config use-context $KUBE_CONTEXT
  - kubectl get namespace "$KUBE_NAMESPACE" 2>/dev/null || kubectl create namespace "$KUBE_NAMESPACE"
  - kubectl config set-context --current --namespace=$KUBE_NAMESPACE
  - |
    if kubectl get serviceaccounts --namespace=$KUBE_NAMESPACE | grep -q "$KSA_NAME"; then
        :
      else
        echo "Creating kubernetes service account [$KSA_NAME] in namespace [$KUBE_NAMESPACE]..." INFO
        kubectl create serviceaccount "$KSA_NAME" --namespace "$KUBE_NAMESPACE"
    fi
  - ${CI_PROJECT_DIR}/deploy_services.sh
  - |
    if [ -n "$APPLICATION" ]; then
      echo "deployment is triggered by the $APPLICATION, executing on ${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}, ${CI_BRANCH_TAG_NORMALIZED}"
      echo "Using the image $IMAGE_TAG built by the "$APPLICATION" pipeline"
      IMAGE_TAG=$IMAGE_TAG bash "${CI_PROJECT_DIR}/$APPLICATION/gcp/apply.sh"
    else
      echo "Internal Changes to manifest files, need to re-deploy all applications with images corresponding to this branch"
      echo "${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}, $ ${CF_BRANCH_TAG_NORMALIZED}:latest"
      CRD_IMAGE_TAG=$CRD_IMAGE_TAG bash "${CI_PROJECT_DIR}/crd/gcp/apply.sh"
    fi
#   - kubectl get pods
#   - kubectl apply -f ${CI_PROJECT_DIR}/k8s/*

gcloud destroy:
  stage: cleanup
  image: google/cloud-sdk
  when: manual
  script:
  - "${CI_PROJECT_DIR}/delete_deployments.sh"